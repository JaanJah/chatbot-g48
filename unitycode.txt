using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Networking;


public class ButtonScript : MonoBehaviour {

    public string url;
    public string user = "alfa";

    [SerializeField]
    private GameObject scrollViewObject;

    [SerializeField]
    private InputField inputText;

    [SerializeField]
    private Text textField;

    [System.Serializable]
    class RequestPayload
    {
        public string sender;
        public string message;
    }

    [System.Serializable]
    class ResponsePayload
    {
        public string recipient_id;
        public string text;
    }

    [System.Serializable]
    class ListResp
    {
        public List<ResponsePayload> listResp;
    }

    // Use this for initialization
    void Start () {
        textField.text = "You are connecting to chatbot Anna with\nUser:" + user + "\nUsing URL:" + url + "\n";
        textField.text = textField.text + "Use commands:\n /ip xxx.xxx.xxx.xxx - for new ip address \n /c - to clear the screen\n /u name - to set new username\n";
        Canvas.ForceUpdateCanvases();
        scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
    }

	// Update is called once per frame
	void Update () {
		
	}

    public void Click()
    {
        if (inputText.text.Length > 0)
        {

            if (inputText.text.StartsWith("/"))
            {
                if (inputText.text.StartsWith("/c") || inputText.text.StartsWith("/C"))
                {
                    textField.text = "";
                    Canvas.ForceUpdateCanvases();
                    scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
                    inputText.text = "";
                    inputText.Select();
                }
                else if(inputText.text.StartsWith("/IP") || inputText.text.StartsWith("/ip"))
                {
                    url = "http://" + inputText.text.Substring(4) + ":5005/webhooks/rest/webhook";
                    textField.text = textField.text + "New Server URL: " + url + "\n";
                    Canvas.ForceUpdateCanvases();
                    scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
                    inputText.text = "";
                    inputText.Select();
                }
                else if(inputText.text.StartsWith("/U") || inputText.text.StartsWith("/u"))
                {
                    user = inputText.text.Substring(3);
                    textField.text = textField.text + "New user name: " + user + "\n";
                    Canvas.ForceUpdateCanvases();
                    scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
                    inputText.text = "";
                    inputText.Select();
                }
                else
                {
                    textField.text = textField.text + "Use commands:\n /ip xxx.xxx.xxx.xxx - for new ip address \n /c - to clear the screen\n /u name - to set new username\n";
                    Canvas.ForceUpdateCanvases();
                    scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
                    inputText.text = "";
                    inputText.Select();
                }
            }
            else
            {
                textField.text = textField.text + "You: " + inputText.text + "\n";
                Canvas.ForceUpdateCanvases();
                scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
                RequestPayload req = new RequestPayload();
                req.sender = user;
                req.message = inputText.text;
                //Post<RequestPayload, ResponsePayload>(this.url, req, "onSuccess", "onError");
                StartCoroutine(this.handleAsyncRequest(req, "POST", url, "onSuccess", "onError"));
                inputText.text = "";
                inputText.Select();
            }
        }
    }

    void onSuccess(ListResp response)
    {
        foreach (ResponsePayload rp in response.listResp)
        {
            textField.text = textField.text + "Anna: " + rp.text + "\n";
            Canvas.ForceUpdateCanvases();
            scrollViewObject.GetComponent<ScrollRect>().verticalNormalizedPosition = 0f;
        }
    }

    void onError(string error)
    {
        Debug.Log("onError: " + error);
    }

    private T fromJSON<T>(string json)
    {
        return JsonUtility.FromJson<T>(json);
    }

    private string toJSON<T>(T model)
    {
        return JsonUtility.ToJson(model);
    }

    private IEnumerator handleAsyncRequest(RequestPayload payload, string method, string url, string successCallback, string errorCallback)
    {
        UnityWebRequest webRequest = new UnityWebRequest(url, method);
        byte[] payloadBytes;
        if (payload != null)
        {
            payloadBytes = System.Text.Encoding.UTF8.GetBytes(this.toJSON<RequestPayload>(payload));
        }
        else
        {
            payloadBytes = System.Text.Encoding.UTF8.GetBytes("{}");
        }
        UploadHandler upload = new UploadHandlerRaw(payloadBytes);
        webRequest.uploadHandler = upload;
        webRequest.downloadHandler = new DownloadHandlerBuffer();
        webRequest.SetRequestHeader("Content-Type", "application/json");
        //yield return webRequest.Send();
        yield return webRequest.SendWebRequest();

        if (webRequest.isNetworkError)
        {
            gameObject.BroadcastMessage(errorCallback, webRequest.error);
        }
        else
        {
            if (webRequest.responseCode < 200 || webRequest.responseCode >= 400)
            {
                gameObject.BroadcastMessage(errorCallback, webRequest.downloadHandler.text);
            }
            else
            {
                //Debug.Log("Resp:"+webRequest.downloadHandler.text);
                //"{\"listResp\":[{\"recipient_id\":\"alfa\",\"text\":\"Bye\"}]}";
                ListResp response = this.fromJSON<ListResp>("{\"listResp\":"+webRequest.downloadHandler.text+"}");
                gameObject.BroadcastMessage(successCallback, response);
            }
        }
    }
}